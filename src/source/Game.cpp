#include "../include/Game.h"
#include "../include/Debug.h"

Game::Game()
	:
	wnd(sf::VideoMode::getDesktopMode(), "PlatformerCPP"),
	DeltaTime(0),
	Difficulty(1),
	enemy(sf::Vector2f(30, 30)),
	tilemap(std::vector<std::string>{
	"map:",
	"TextMap0.texmap",
		"0000000000000000000000000000000000000001111111111111111111111111111111111111111111000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000001111111111111111111111111111111111111111111000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000001111111111111111111111111111111111111111000000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000001111111111111111111111111111111111000000000000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000111111000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000111111000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000111111000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000111111000000000000000000000000000000000000000000000000000000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000011111000000000111111111111111111111111111111100000000001000000000000000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000011111000011100111111111111111111111111111111000000000001000000000001000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000011111000000000111111111111111111111111111111000001000001000000000001000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000011111100000000111111111111111111111111111110000001000001000000000001000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000011111100000000000000000000000000000001111100000001000001000001000001000000000000000000011111100000000000000000000000000",
		"0000000000000000000000000000000000000000011111100000000000000000000000000000001111100000001000001000001000001000000111111111000011111100011111111111111111111111",
		"0000000000000000000000000000000000000000011111100000000000000000000000000000001111100000001000001000001000001000000111111111000011111100011111111111111111111111",
		"0000000000000000000000000000000000000000011111111000000111111111111111111111001111000000001000001000001000001000000111111111000011111101011111111111111111111111",
		"0000000000000000000000000000000000000000001111111000000111111111111111111111001111000000001000001000001000001000000111111111000011111100011111111111111111111111",
		"0000000000000000000000000000000000000000001111111000000111111111111111111111001111000000001000001000001000001000000111111111000011111100011111111111111111111111",
		"0000000000000000000000000000000000000000001111111000000111111100000000000000001111000000001000001000001000001000000111111111000011111100011111111111111111111111",
		"0000000000000000000000000000000000000000001111111000000111111100000000000000011111000000001000001000001000001000000111111111000000000001011111111111111111111000",
		"0000000000000000000000000000000000000000001111111000000111111100000000000000011111000000001000001000001000001000000111111111000000000000011111111111111100000000",
		"0000000000000000000000000000000000000000000111111000000111111100000000000000011111000000001000001000001000001000000111111111000000000000011111111111111000000000",
		"0000000000000000000000000000000000000000000011110000000011111100011111111111111111000000001000001000001000001000000111111111000000000000011111111111111000000000",
		"0000000000000000000000000000000000000000000000000000000001110000011111111111111111000000001000001000001000001000000111111111000000000001011111111111111000000000",
		"0000000000000000000000000000000000000000000000000000000000000000001111111111111111000000001000001000001000001000000111111111000000000000011111111111110000000000",
		"0000000000000000000000000000000000000000000000000000000000000000000011111111111110000000001000001000001000001000000111111111000000000000011111111111110000000000",
		"0000000000000000000000000000000000000000000000000000000000000011000001111111111110000000001000001000001000001000000111111111000000000000011111111111110000000000",
		"0000000000000000000000000000000000000000000000000000000000000000000000011111111100000000001000001000001000001000000111111111111111111111111111111111110000000000",
		"0000000000000000000000000000000000000000000000000000000000000000000000011111111100000000001000001000001000001000000111111111111111111111111111111111100000000000",
		"0000000000000000000000000000000000000000000000000000000000000000000000011111111000000000001000001000001000001000000111111111111111111111111111111111100000000000",
		"0000000000000000000000000000000000000000000000000000000000000000000001111111110000000000001000001000001000001000000111111111111111111111111111111111100000000000",
		"0000000000000000000000000000000000000000000000000000000000000000000001111111100000000000001000001000001000001000000111111111111111111111111111111111100000000000",
		"0000000000000000000000000000000000000000000000000000000000001000111111111111100000000000001000001000001000001000000111111111111111111111111111111111100000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111111100000000000001000001000001000001000000111111111111111111111111111111111100000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111111000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111110000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111110000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111110000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111100000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111100000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111100000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111100000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111100000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111100000000000000001000001000001000001000000111111110000000000000000000000000000000000000",
		"1111111111111111111111111111111110000011111111111111111110001000111111111100000000000000001000001000001000001000000111111110000000000000000000000000000000000000"
})
{
	Debug::Println("Instanciating Game");

	Debug::Println("Done instanciating");
}

Game::~Game()
{}

Game& Game::GetInstance()
{
	static Game instance;
	return instance;
}

void Game::run()
{
	while (wnd.isOpen())
	{
		updateEvents();
		update();
		render();
	}
}

void Game::updateEvents()
{
	sf::Event e;
	while (wnd.pollEvent(e))
	{
		switch (e.type)
		{
		case sf::Event::Closed:
			wnd.close();
			break;
		default:
			break;
		}
	}
}

void Game::update()
{
	DeltaTime = DeltaClock.restart().asSeconds();
	
	enemy.update(DeltaTime);
	player.update(DeltaTime);
}

void Game::render()
{
	wnd.clear();

	wnd.setView(sf::View(player.rect.getPosition(), { 1920, 1080 }));
	tilemap.render(wnd);
	enemy.render(wnd);
	player.render(wnd);

	wnd.display();
}